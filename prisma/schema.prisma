// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  
  
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model Product {
id  String @id @default(auto()) @map("_id") @db.ObjectId
name String
price Int 
desc String 
photos String[] 
options Json
store Store @relation(fields: [storeId], references: [id])
storeId String @db.ObjectId
category Json
comments Comments[]
}

model Category{
id String @id @default(auto()) @map("_id") @db.ObjectId
name String @unique
subcategories Subcategory[]
}

model Subcategory{
id String @id @default(auto()) @map("_id") @db.ObjectId
name String 
category Category @relation(fields: [categoryId], references: [id])
categoryId String @db.ObjectId
}

model Cart{
id String @id @default(auto()) @map("_id") @db.ObjectId
owner   User   @relation(fields: [ownerId], references: [id])
ownerId String @unique @db.ObjectId
products Json?
}

model Store{
id String @id @default(auto()) @map("_id") @db.ObjectId
name String
photo String
cnpj String @unique
desc String?
products Product[]
admins Admin[]
}

model Admin{
id String @id @default(auto()) @map("_id") @db.ObjectId
first_name String  
last_name String  
photo String?
email String @unique
password String 
role String @default("admin")
store Store @relation(fields: [storeId], references: [id])
storeId String @db.ObjectId
}

model User{
id String @id @default(auto()) @map("_id") @db.ObjectId
first_name String
last_name String
photo String?
email String @unique
password String 
requests Request[]
comments Comments[]
likes LikesComment[]
cart   Cart? 
}

model Elder {
id String @id @default(auto()) @map("_id") @db.ObjectId
first_name String  
last_name String  
email String @unique
password String  
role String @default("elder")
}

model Comments {
id String @id @default(auto()) @map("_id") @db.ObjectId
author   User   @relation(fields: [authorId], references: [id])
authorId String @db.ObjectId
product_commented  Product @relation(fields: [product_commentedId], references: [id])
product_commentedId  String @db.ObjectId
title String
stars Int @default(0)
likes LikesComment[]
createdAt DateTime @default(now())
}

model LikesComment {
id String @id @default(auto()) @map("_id") @db.ObjectId
author   User   @relation(fields: [authorId], references: [id])
authorId String @db.ObjectId
commentLiked Comments @relation(fields: [commentId], references: [id])
commentId String @db.ObjectId
makedAt DateTime @default(now())
}

model Request{
id String @id @default(auto()) @map("_id") @db.ObjectId
state String @default("processando")
date DateTime @default(now())
delivered DateTime? 
payer User? @relation(fields: [payerId], references: [id])
payerId String? @db.ObjectId
}
